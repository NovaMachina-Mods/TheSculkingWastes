import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
    id 'net.minecraftforge.gradle' version '5.+'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.ajoberstar.grgit' version '4.1.1'
    id "com.matthewprenger.cursegradle" version '1.4.0'
    id 'java'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id "org.sonarqube" version "3.4.+"
    id "com.diffplug.spotless" version "6.6.1"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

sonarqube {
    properties {
        property "sonar.projectKey", "NovaMachina-Mods_TheSculkingWastes_AYHlPGtJnoUcJlyyc6Gz"
    }
}

spotless {
//    ratchetFrom 'origin/1.19.X'
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'

        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    java {
        removeUnusedImports()
        trimTrailingWhitespace()
//        googleJavaFormat()
    }
}

wrapper {
    gradleVersion = '7.4.2'
    distributionType = Wrapper.DistributionType.ALL
}

defaultTasks 'build'

idea {
    module {
        // For some reason this is necessary for IDEA 2014 workspaces to recognize assets
        inheritOutputDirs = true
        // Exclude directories from being managed
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            excludeDirs.add(new File(projectDir, excludeDirName))
        }
    }
}

sourceSets {
    api {
        //The API has no resources
        resources.srcDirs = []
    }
    main {
        resources {
            include '**/**'
            // copy everything
            // Add the generated main module resources
            srcDirs += 'src/datagen/generated/sculkingwastes'
            // But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
        compileClasspath += api.output
        runtimeClasspath += api.output
    }
    test {
        // The test module has no resources
        resources.srcDirs = []
        compileClasspath += api.output + main.output
        runtimeClasspath += api.output + main.output
    }
    //Data gen modules for the different modules
    datagenmain {
        setupDataGenSourceSet(datagenmain, null, 'main')
    }
}

// This method sets up a source set in datagen/$name and adds the api, main Ex Nihilo module and an optional
// base module to the dependencies of the data generators source set that we are setting up
def setupDataGenSourceSet(SourceSet datagenSourceSet, SourceSet baseSourceSet, String name) {
    datagenSourceSet.java.srcDirs = ['src/datagen/' + name + '/java']
    datagenSourceSet.compileClasspath += project.sourceSets.api.output
    datagenSourceSet.compileClasspath += project.sourceSets.main.output
    if (baseSourceSet == null) {
        datagenSourceSet.resources.srcDirs = ['src/datagen/' + name + '/resources']
    } else {
        // Data gen SourceSets outside of the main one have no resources
        datagenSourceSet.resources.srcDirs = []
        // Only case it is null is when we are doing datagenmain so other cases also add access to the stuff
        // in datagenmain so we can add helper classes
        datagenSourceSet.compileClasspath += project.sourceSets.datagenmain.output
        datagenSourceSet.compileClasspath += baseSourceSet.output
    }
}

configurations {
    // Make sure all our sub source set stuff extends the proper base methods so that
    // they can see all the dependencies we have in dependencies including Forge
    extendConfigurations(implementation, apiImplementation, testImplementation, datagenmainImplementation)
    extendConfigurations(compileOnly, apiCompileOnly, testCompileOnly, datagenmainCompileOnly)
    extendConfigurations(runtimeOnly, apiRuntimeOnly, datagenmainRuntimeOnly)
    // Extend configurations for alternate modules. First by making the implementation, compileOnly, runtimeOnly equivalents
    // for those modules extend the main ones, and then by making the corresponding ones for datagen for the module extend those.
    // This way if we add a dependency/integration in a submodule instead of the main module of Ex Nihilo, the datagen of the corresponding
    // module will be able to properly access the dependency
    for (def name : []) {
        maybeCreate("datagen" + name + "Implementation").extendsFrom(maybeCreate(name + "Implementation").extendsFrom(implementation))
        maybeCreate("datagen" + name + "CompileOnly").extendsFrom(maybeCreate(name + "CompileOnly").extendsFrom(compileOnly))
        maybeCreate("datagen" + name + "RuntimeOnly").extendsFrom(maybeCreate(name + "RuntimeOnly").extendsFrom(runtimeOnly))
    }
}

static void extendConfigurations(Configuration base, Configuration... configurations) {
    for (def configuration : configurations) {
        configuration.extendsFrom(base)
    }
}

group = "novamachina."
version = "${minecraft_version}-" + new Date().format("yyyy.MM.dd-HH.mm.ss") + (project.property('curse_release_type') != 'release' ? "-${project.property('curse_release_type')}" : '')
//        "${mod_version}." + (System.env.BUILD_NUMBER ?: "homebaked")
archivesBaseName = "${artifact_basename}"

ext {
    versionProperties = ["version"                : version,
                         "mc_version"             : minecraft_version_range,
                         "forge_version"          : forge_version_range,
                         "loader_version"         : "[" + forge_major + ",)",
                         "minecraft_version_range": minecraft_version_range,]
    jsonPatterns = ["**/*.json", "**/*.mcmeta"]
}

def mainReplaceResources = createReplaceResourcesTask("main", sourceSets.main)

def createReplaceResourcesTask(String output, SourceSet sourceSet) {
    return tasks.register("${output}ReplaceResources", Copy) {
        it.outputs.upToDateWhen { false }
        def modsToml = copySpec {
            from(sourceSet.resources) {
                include "META-INF/mods.toml"
                expand versionProperties
            }
        }
        // Copy it into the build dir
        it.with modsToml
        it.into "$buildDir/resources/${output}/"
        // If IntelliJ's output dir exists, copy it there as well
        if (new File("$rootDir/out/production/TheSkulkingWastes.${output}/").exists()) {
            // Note: This copies it into the correct place, but it still doesn't have the IntelliJ
            // run work by default because of incorrect MOD_CLASSES getting generated.
            // probably related to us setting inheritOutputDirs
            copy {
                with modsToml
                into "$rootDir/out/production/TheSkulkingWastes.${output}/"
            }
        }
        // If Eclipse's output dir exists, copy it there as well
        if (new File("$rootDir/bin/${output}/").exists()) {
            copy {
                with modsToml
                into "$rootDir/bin/${output}/"
            }
        }
    }
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    accessTransformers.from(file('src/main/resources/META-INF/accesstransformer.cfg'))

    runs {
        client {
            workingDirectory file("run")
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'sculkingwastes'
            // This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // The below if statements are to add args to your gradle.properties file in user home
            // (DO NOT add them directly to the gradle.properties file for this project)
            // Setting the below properties allows use of your normal Minecraft account in the
            // dev environment including having your skin load. Each property also has a comment
            // explaining what information to set the value to/format it expects
            // One thing to note is because of the caching that goes on, after changing these
            // variables, you need to refresh the project and rerun genIntellijRuns/genEclipseRuns
            if (project.hasProperty('mc_uuid')) {
                // Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                // Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            if (project.hasProperty('mc_accessToken')) {
                // Your access token, you can find it in your '.minecraft/launcher_accounts.json' file
                args '--accessToken', project.getProperty('mc_accessToken')
            }
            if (project.hasProperty('forge_force_ansi')) {
                // Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                sculkingwastes.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        server {
            workingDirectory file("runserver")
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'sculkingwastes'
            // This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('forge_force_ansi')) {
                // Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            mods {
                sculkingwastes.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        gameTestServer {
            workingDirectory file("run")
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'sculkingwastes'

            mods {
                sculkingwastes.sources((SourceSet[]) [sourceSets.main, sourceSets.api])
            }
        }

        data {
            workingDirectory file("run")
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            environment 'target', 'fmluserdevdata'
            // This fixes Mixin application problems from other mods because their refMaps are SRG-based, but we're in a MCP env
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            if (project.hasProperty('forge_force_ansi')) {
                // Force ansi if declared as a gradle variable, as the auto detection doesn't detect IntelliJ properly
                // or eclipse's plugin that adds support for ansi escape in console
                jvmArg('-Dterminal.ansi=' + project.getProperty('forge_force_ansi'))
            }

            args '--all', '--output', file('src/datagen/generated/'),
                    '--mod', 'sculkingwastes',
                    '--existing', file('src/main/resources/')

            mods {
                sculkingwastes.sources((SourceSet[]) [sourceSets.main, sourceSets.api, sourceSets.datagenmain])
            }
        }
    }
}

repositories {
    maven {
        name 'thiakil'
        url 'https://maven.thiakil.com'
        content {
            includeGroup 'de.oceanlabs.mcp'
            includeGroup 'net.minecraft'//custom mappings
        }
    }

    whenObjectAdded {
// ForgeGradle adds these in an afterEvaluate, so we need to catch them as they're added and exclude mod artifacts/groups
        if (it instanceof MavenArtifactRepository) {
            def url = it.url.toString()
            if (url == 'https://maven.minecraftforge.net/' || url == 'https://libraries.minecraft.net/' || url == 'https://repo.maven.apache.org/maven2/') {
                try {
                    it.content {
//                        excludeGroup 'curse.maven'
                    }
                    println("Adding exclusions to ${it.url}")
                } catch (Exception ignored) {
                    //oh well
                }
            }
        }
    }
}

test {
    useJUnitPlatform()
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_major}.${forge_minor}.${forge_patch}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_version}"

    compileOnly "org.jetbrains:annotations:${jb_annotations}"
}

if (project.hasProperty('UPDATE_MAPPINGS')) {
    // If the project has the update mappings property, configure it to be able to target all our extra sourceSets as well
    // so that whenever we need to update mappings it is quick and easy to do so.
    // Note: This needs to be below the dependencies and minecraft blocks so that it can properly read the mappings value
    // and also read and find the minecraft dep
    def extraSourceSets = [
            sourceSets.api,
            sourceSets.test,
            sourceSets.datagenmain
    ]
    Set<File> allExtraDirs = new HashSet<>()
    for (def sourceSet : extraSourceSets) {
        allExtraDirs.addAll(sourceSet.java.srcDirs)
    }
    extractRangeMap {
        sources.from(allExtraDirs)
    }
    applyRangeMap {
        sources.from(allExtraDirs)
    }
    allExtraDirs.each { extractMappedNew.addTarget it }
}

// Set the various variables/settings for the different process resources tasks
processResources {
    setupProcessResources(processResources, mainReplaceResources, 'main')
}
processDatagenmainResources {
    dependsOn(compileJava)
}

def setupProcessResources(ProcessResources process, TaskProvider<Task> replaceResources, String logoTitle) {
    process.duplicatesStrategy(DuplicatesStrategy.FAIL)
    process.exclude('META-INF/mods.toml')
    process.from("${projectDir}") { include "logo-${logoTitle}.png" }
    process.configure { finalizedBy(replaceResources) }
    process.doLast {
        fileTree(dir: process.getOutputs().getFiles().getAsPath(), includes: jsonPatterns).each {
            File file -> file.setText(JsonOutput.toJson(new JsonSlurper().parse(file)))
        }
    }
}

// Make the various classes tasks depend on the corresponding replaceResources tasks in addition to the default processResources tasks they depend on
classes.configure {
    dependsOn(mainReplaceResources)
}

def getManifestAttributes(String title) {
    return [
            "Specification-Title"     : title,
            "Specification-Vendor"    : "NovaMachina",
            "Specification-Version"   : "${archivesBaseName}-${version}",
            "Implementation-Title"    : title,
            "Implementation-Version"  : "${archivesBaseName}-${version}",
            "Implementation-Vendor"   : "NovaMachina",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
    ]
}

jar {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    from([sourceSets.api.output, sourceSets.main.output])
    manifest.attributes(getManifestAttributes("The Sculking Wastes"))
    afterEvaluate { finalizedBy reobfJar }
}

task sourcesJar(type: Jar, dependsOn: [classes, apiClasses]) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("sources")
    from(sourceSets.api.allJava, sourceSets.main.allJava)
    manifest.attributes(getManifestAttributes("The Sculking Wastes"))
}

task apiJar(type: Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set("api")
    from sourceSets.api.output
    manifest.attributes(getManifestAttributes("The Sculking Wastes"))
    afterEvaluate { finalizedBy reobfApiJar }
}

clean {
    //TODO: Try to come up with a slightly better solution to this that deletes more,
    // for example make it calculate the current hash and only leave that or only do
    // this if clean build is being ran. We also ideally would have it remove some of
    // the data from our generated folder, but for now this will do given jenkins runs
    // a clean build because we need to make sure it doesn't fail
    def filteredDelete = new HashSet<>()
    for (def toDelete : getDelete()) {
        for (def f : file(toDelete).listFiles()) {
            if (f.getName() != "fg_cache") {
                if (f.getName() == "generated") {
                    for (def generated : file(f).listFiles()) {
                        if (generated.getName() != "data" && generated.getName() != "META-INF") {
                            filteredDelete.add(generated)
                        }
                    }
                } else {
                    filteredDelete.add(f)
                }
            }
        }
    }
    setDelete(filteredDelete)
}

tasks.withType(JavaCompile).configureEach({
    it.options.encoding = 'UTF-8'
})

compileJava {
    options.getGeneratedSourceOutputDirectory().set(file("src/datagen/main/resources/"))
}

artifacts {
    archives apiJar
    archives jar
    archives sourcesJar
}

reobf {
    apiJar { classpath.from(sourceSets.api.compileClasspath) }
    jar { classpath.from(sourceSets.main.compileClasspath) }
}

// Minimize/optimize all png files, requires optipng on the PATH
// Credits: BrainStone
void minimizePNGFile(File file) {
    long size = file.length()
    exec {
        executable "optipng"
        args "-q", "-o7", "-zm1-9", "-strip", "all", file
    }
    long newSize = file.length()
    if (newSize < size) {
        System.out.format("Reduced File size of %s from %d bytes to %d bytes (reduced by %.2f%%)\n",
                file, size, newSize, ((double) (size - newSize)) / ((double) size) * 100.0)
    }
}

task optimizePng {
    def pngPatterns = ["**/*.png"]
    doLast {
        // Ensure the logo is minimized (we add this file to each jar)
        minimizePNGFile(file("${projectDir}/logo.png"))
        // Minimize any PNGs in the source sets
        def sourceSets = [sourceSets.main]
        for (def sourceSet : sourceSets) {
            for (dir in sourceSet.resources.srcDirs) {
                fileTree(dir: dir, includes: pngPatterns).each { minimizePNGFile(it) }
            }
        }
    }
}

tasks.withType(GenerateModuleMetadata) {
    // Disable Gradle 7 module metadata generation as it does not play nicely with FG
    enabled = false
}

publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("main", MavenPublication) { MavenPublication publication ->
            publication.from((SoftwareComponent) components.java)
            publication.groupId = project.group + "sculkingwastes"
            publication.version = project.version
            publication.artifactId = System.getenv("MAVEN_ARTIFACT") ?: project.archivesBaseName
            publication.artifacts = [jar]
            publication.pom {
                name.set("The Sculking Wastes")
                packaging = 'jar'
                description.set('The Sculking Wastes Description WIP')
                url.set('')
                scm {
                    url.set('https://github.com/NovaMachina-Mods/TheSculkingWastes.git')
                }
                issueManagement {
                    system.set('github')
                    url.set('https://github.com/NovaMachina-Mods/TheSculkingWastes/issues')
                }
                licenses {
                    license {
                        name.set('Creative Commons')
                        distribution.set('repo')
                    }
                }
                withXml {
                    NodeList dependencies = asNode().dependencies
                    NodeList allDeps = dependencies.'*'

                    // Remove forge deps
                    allDeps.<Node> findAll() { Node el ->
                        el.artifactId.text() == 'forge' && el.groupId.text() == 'net.minecraftforge'
                    }.forEach() { Node el ->
                        el.parent().remove(el)
                    }
                    //remove ForgeGradle's mapped suffix from versions & set as optional so anyone else doesn't inherit them
                    allDeps.<Node> findAll() { Node el ->
                        el.version.text().contains('_mapped_')
                    }.each { Node el ->
                        el.version.each { Node version ->
                            def versionText = version.text()
                            version.setValue(versionText.substring(0, versionText.indexOf('_mapped_')))
                        }
                        el.appendNode('optional', true)
                    }
                }
            }
        }
        publicationContainer.register("api", MavenPublication) { MavenPublication publication ->
            publication.from((SoftwareComponent) components.java)
            publication.groupId = project.group + "sculkingwastes"
            publication.version = project.version
            publication.artifactId = System.getenv("MAVEN_ARTIFACT") ?: project.archivesBaseName
            publication.artifacts = [apiJar]
            publication.pom {
                name.set("The Sculking Wastes")
                packaging = 'jar'
                description.set('The Sculking Wastes API Description WIP')
                url.set('')
                scm {
                    url.set('https://github.com/NovaMachina-Mods/TheSculkingWastes.git')
                }
                issueManagement {
                    system.set('github')
                    url.set('https://github.com/NovaMachina-Mods/TheSculkingWastes/issues')
                }
                licenses {
                    license {
                        name.set('Creative Commons')
                        distribution.set('repo')
                    }
                }
                withXml {
                    NodeList dependencies = asNode().dependencies
                    NodeList allDeps = dependencies.'*'

                    // Remove forge deps
                    allDeps.<Node> findAll() { Node el ->
                        el.artifactId.text() == 'forge' && el.groupId.text() == 'net.minecraftforge'
                    }.forEach() { Node el ->
                        el.parent().remove(el)
                    }
                    //remove ForgeGradle's mapped suffix from versions & set as optional so anyone else doesn't inherit them
                    allDeps.<Node> findAll() { Node el ->
                        el.version.text().contains('_mapped_')
                    }.each { Node el ->
                        el.version.each { Node version ->
                            def versionText = version.text()
                            version.setValue(versionText.substring(0, versionText.indexOf('_mapped_')))
                        }
                        el.appendNode('optional', true)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = "https://repo.jacob-williams.me/repository/maven-releases/"
            credentials {
                username = System.getenv("NEXUS_USERNAME")
                password = System.getenv("NEXUS_PASSWORD")
            }
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

tasks.curseforge.dependsOn jar, apiJar

if (System.getenv("CURSEFORGE_KEY") != null || project.hasProperty('curseforgeKey')) {
    println "Enabling Curseforge config"
    curseforge {
        apiKey = System.getenv("CURSEFORGE_KEY") ?: project.findProperty("curseforgeKey")

        options {
            debug = true
        }

        def resolvedChangelog = null

        // closure to generate the changelog once, and only when needed by CurseGradle
        def changeLogResolver = { ->
            if (resolvedChangelog != null) {
                return resolvedChangelog
            }
            def generatedChangelog = "Unable to generate changelog :("
            def currentCommit = System.getenv("GIT_COMMIT")
            def prevCommit = System.getenv("GIT_PREVIOUS_SUCCESSFUL_COMMIT") ?: System.getenv("GIT_PREVIOUS_COMMIT")

            if (currentCommit != null && prevCommit != null) {
                generatedChangelog = ""
                grgit.log {
                    range(prevCommit, currentCommit)
                }.reverse().each { commit ->
                    // Use full message rather than short message to get any new lines, and trim it so that any trailing new lines
                    // get removed so that we don't end up with extra spaces
                    String message = commit.fullMessage.trim()
                    if (!message.startsWith("Merge branch") && !message.startsWith("Merge pull request")) {
                        //Ignore Merges and PR Merges
                        message = message.replaceAll("#(\\d+)", { match ->// turn issues/prs into links (github currently supports prs being linked as issues)
                            return "<a href=\"https://github.com/NovaMachina-Mods/TheSculkingWastes/issues/${match[1]}\">${match[0]}</a>"
                        }).replaceAll("\\n", "<br>&emsp;")
// convert new lines that are part of a commit message into actual new lines and a tab
                        if (generatedChangelog != "") {
                            // If this isn't the first commit prepend an extra newline
                            generatedChangelog += "<br>"
                        }
                        generatedChangelog += "<a href=\"https://github.com/NovaMachina-Mods/TheSculkingWastes/commit/${commit.id}\">${commit.getAbbreviatedId()}</a> - ${message}"
                    }
                }
                println "Changelog generated"
            }

            def releaseNotesFile = project.file("docs/release_${version}.html")
            if (releaseNotesFile.exists()) {
                // Add any version specific changelog stuff
                def releaseNotes = releaseNotesFile.getText()
                generatedChangelog = "$releaseNotes<br> $generatedChangelog"
            }

            if (curse_release_type == "alpha") {
                // Add a warning at the top about what an alpha build means
                generatedChangelog = "Warning: The Sculking Wastes is currently in alpha, and is not recommended for widespread use in modpacks. There are likely to be game breaking bugs, " +
                        "and updating from one alpha to the next may cause various The Sculking Wastes blocks and items to disappear/void their contents. While we will try to not have this " +
                        "happen/keep it to a minimum make sure to make backups. <br> $generatedChangelog"
            }
            if (curse_release_type == "beta") {
                // Add a warning at the top about what an beta build means
                generatedChangelog = "Warning: The Sculking Wastes is currently in beta, and is not recommended for widespread use in modpacks. There may be game breaking bugs, " +
                        "and updating from one beta to the next may cause various The Sculking Wastes blocks and items to disappear/void their contents. " +
                        "While this is unlikely to happen in a beta, make sure to make backups. <br> $generatedChangelog"
            }
            resolvedChangelog = generatedChangelog
            return generatedChangelog
        }

        //Main
        project {
            id = '400012'
            changelogType = "html"
            changelog = changeLogResolver
            // A file can also be set using: changelog = file('changelog.txt')
            releaseType = "${curse_release_type}"
            mainArtifact(jar) {
                relations {
                    optionalDependency "jade"
                    optionalDependency "jei"
                    optionalDependency "the-one-probe"
                }
            }
//            addArtifact apiJar
            addGameVersion "${minecraft_version}"
        }
    }
}
